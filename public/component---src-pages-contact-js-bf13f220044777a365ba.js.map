{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-seo/src/SEO.js","webpack:///./src/components/contactLayout.js","webpack:///./src/pages/contact.js"],"names":["title","description","image","pagePath","ogType","requireImage","appendSiteTitleToPageTitle","twitterCard","locale","authorUrl","publisherUrl","keywords","schema","seo","siteName","siteUrl","defaultSiteImage","defaultLocale","twitterSite","twitterCreator","defaultAuthorUrl","defaultPublisherUrl","appleTouch","favicon16","favicon32","globalSchema","Error","keywordsStr","pageLocale","pageUrl","URL","pageImage","pageTitle","pageAuthorUrl","pagePublisherUrl","trim","Array","isArray","join","schemaJson","hasSchema","str","JSON","parse","e","isValidJson","Helmet","lang","rel","sizes","href","type","name","content","property","contactLayout","children","className","SEO","data","isArtistPage","page","method","action","id","required","rows","value","query"],"mappings":"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","file":"component---src-pages-contact-js-bf13f220044777a365ba.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction isValidJson(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n\nexport default ({\n  title,\n  description,\n  image,\n  pagePath,\n  ogType = \"website\",\n  requireImage = true,\n  appendSiteTitleToPageTitle = true,\n  twitterCard = \"summary_large_image\",\n  locale,\n  authorUrl,\n  publisherUrl,\n  keywords,\n  schema\n}) => {\n  const {\n    seo: {\n      siteName,\n      siteUrl,\n      defaultSiteImage,\n      defaultLocale,\n      twitterSite,\n      twitterCreator,\n      defaultAuthorUrl,\n      defaultPublisherUrl,\n      appleTouch,\n      favicon16,\n      favicon32,\n      globalSchema\n    }\n  } = useStaticQuery(graphql`\n    query SEO_Query {\n      seo {\n        defaultSiteImage\n        defaultLocale: locale\n        siteUrl\n        siteName\n        globalSchema\n        twitterCreator\n        twitterSite\n        defaultAuthorUrl\n        defaultPublisherUrl\n        appleTouch\n        favicon32\n        favicon16\n      }\n    }\n  `);\n\n  if (!title) {\n    throw Error(\"'title' prop is required.\");\n  }\n\n  if (!description) {\n    throw Error(\"'description' prop is required.\");\n  }\n\n  if (!pagePath) {\n    throw Error(\"'pagePath' prop is required.\");\n  }\n\n  const pageLocale = locale || defaultLocale;\n  const pageUrl = new URL(pagePath, siteUrl); // `${siteUrl}${pagePath}`;\n  const pageImage = image || defaultSiteImage;\n  const pageTitle = appendSiteTitleToPageTitle\n    ? `${title} Â· ${siteName}`\n    : title;\n\n  const pageAuthorUrl = authorUrl || defaultAuthorUrl;\n  const pagePublisherUrl = publisherUrl || defaultPublisherUrl;\n\n  let keywordsStr;\n  if (keywords && typeof keywords === \"string\") {\n    keywordsStr = keywords.trim();\n  }\n  if (keywords && Array.isArray(keywords)) {\n    keywordsStr = keywords.join(\", \").trim();\n  }\n\n  // const keywordsStr = keywords ?\n\n  if (!pageImage && requireImage) {\n    throw Error(\n      \"Image not supplied. Add a 'defaultSiteImage' to site metadata, or pass in an 'image' prop. Or pass 'false' to the requireImage prop, if this page does not need an image.\"\n    );\n  }\n\n  const hasSchema = !!globalSchema || !!schema;\n\n  let schemaJson;\n  if (hasSchema) {\n    schemaJson = `\n    { \"@context\": \"https://schema.org\",\n      \"@graph\": [\n      ${globalSchema || \"\"}${globalSchema && schema ? \",\" : \"\"}${schema || \"\"}\n      ]\n    }`;\n    if (!isValidJson(schemaJson)) {\n      throw Error(\n        \"Invalid JSON Schema. Check the values of 'globalSchema' in gatsby-config.js, or 'schema' prop of the page\"\n      );\n    }\n  }\n\n  return (\n    <Helmet>\n      <html lang=\"en\" />\n\n      {/* Icons */}\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={appleTouch} />\n      <link rel=\"icon\" type=\"image/png\" href={favicon32} sizes=\"32x32\" />\n      <link rel=\"icon\" type=\"image/png\" href={favicon16} sizes=\"16x16\" />\n      <link rel=\"shortcut icon\" href=\"/favicon.ico\" />\n\n      {/* Core  */}\n      <title>{pageTitle}</title>\n      <meta name=\"description\" content={description} />\n      {keywordsStr && <meta name=\"keywords\" content={keywordsStr} />}\n\n      {/* OG */}\n      <meta property=\"og:url\" content={pageUrl} />\n      <meta property=\"og:type\" content={ogType} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:locale\" content={pageLocale} />\n      <meta property=\"og:site_name\" content={siteName} />\n\n      {/* Images */}\n      {requireImage && (\n        <meta property=\"og:image\" content={new URL(pageImage, siteUrl)} />\n      )}\n      {requireImage && (\n        <meta\n          property=\"og:image:secure_url\"\n          content={new URL(pageImage, siteUrl)}\n        />\n      )}\n\n      {/* Article */}\n      {ogType === \"article\" && pagePublisherUrl && (\n        <meta property=\"article:publisher\" content={pagePublisherUrl} />\n      )}\n      {ogType === \"article\" && pageAuthorUrl && (\n        <meta property=\"article:author\" content={pageAuthorUrl} />\n      )}\n\n      {/* Twitter */}\n      <meta name=\"twitter:card\" content={twitterCard} />\n      {twitterSite && <meta name=\"twitter:site\" content={twitterSite} />}\n      {twitterCreator && (\n        <meta name=\"twitter:creator\" content={twitterCreator} />\n      )}\n      {hasSchema && <script type=\"application/ld+json\">{schemaJson}</script>}\n    </Helmet>\n  );\n};\n","import React from \"react\"\nimport \"../styles/layout.scss\"\nimport \"../styles/global.scss\"\nimport HeaderMenu from \"../components/headerMenu\"\nimport { SEO } from \"gatsby-plugin-seo\"\nimport Footer from \"../components/footerComponent\"\n\nconst contactLayout = ({ children }) => {\n  return (\n    <div className=\"master-container\">\n      <SEO\n        title=\"Contact\"\n        description=\"NO COMPROMISE\"\n        pagePath={\"/contact/\"}\n        schema={`{\n              \"@context\": \"https://todmg.club/\",\n              \"@type\": \"WebPage\",\n              \"mainEntity\": {\n                \"@type\": \"Organization\",\n                \"name\": \"THRIVE OR DIE\",\n                \"image\": \"../../static/logo.png\"\n              }\n            }`}\n      />\n      <HeaderMenu></HeaderMenu>\n      <div>{children}</div>\n      <Footer></Footer>\n    </div>\n  )\n}\n\nexport default contactLayout\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/contactLayout\"\nimport \"../styles/contact.scss\"\nimport SeoComponent from \"../components/seoComponent\"\n\nexport default ({ data }) => (\n  <div>\n    <SeoComponent isArtistPage={false} page=\"Contact\" />\n    <Layout>\n      <h3>Contact</h3>\n      <div>You can send us general inqueries, booking, demos, or just any random thoughts you have in mind. If you're sending demos, <b>please</b> submit under these guidelines:\n      <ul>\n      <li>\n          We take <b>original</b> singles, EPs, and albums, <b>no uncleared samples</b>\n      </li>\n      <li>\n          Name should be your artist name, Subject should be the song, EP or Album title, so when submitted your entry will look like: <b>Artist Name - Subject Title</b>\n        </li>\n        <li>\n          Streaming platforms (Soundcloud, clyp.it, etc) only, needs to be downloadable\n        </li>\n        <li>\n          Songs need to be <b>finished</b>, Premastered mixdowns are fine\n        </li>\n        <li>\n          MP3s (constantly 320kbps), WAVs, AIFFs only\n        </li>\n        <li>\n          Leave a note about yourself and your song(s) you're sending! Tell us the best things about you and your songs...confidence\n        </li>\n      </ul>\n      </div>\n      <div className=\"contact-container\">\n        <form method=\"post\" action=\"https://getform.io/f/621a28b5-638c-47ce-8b2c-46374d81bdef\">\n        <label>\n          <div>Name</div>\n          <input type=\"text\" name=\"name\" id=\"name\" required />\n        </label>\n        <label>\n          <div>Email</div>\n          <input type=\"email\" name=\"email\" id=\"email\" required />\n        </label>\n        <label>\n         <div>Subject</div>\n          <input type=\"text\" name=\"subject\" id=\"subject\" required />\n        </label>\n        <label>\n          <div>Message</div>\n          <textarea name=\"message\" id=\"message\" rows=\"5\" required />\n        </label><br></br>\n        <input className=\"clear-input tod-button-black\" type=\"reset\" value=\"Clear\" />\n        <div className=\"contact-controls\"><button className=\"tod-button-black\" type=\"submit\">Send</button>\n        \n        </div>\n      </form>\n      </div>\n    </Layout>\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}